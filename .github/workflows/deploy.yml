name: Deploy College Platform to Vercel

# This workflow is configured for manual triggering only because:
# 1. Vercel automatically handles deployments when code is pushed to the repository
# 2. This workflow provides a manual fallback for deployments when needed
# 3. Prevents duplicate deployments (one from Vercel, one from GitHub Actions)

on:
  workflow_dispatch:  # Only allow manual triggering
    inputs:
      deploy_backend:
        description: 'Deploy backend'
        required: true
        default: 'true'
        type: boolean
      deploy_frontend:
        description: 'Deploy frontend'
        required: true
        default: 'true'
        type: boolean
      environment:
        description: 'Deployment environment'
        required: true
        default: 'production'
        type: choice
        options:
          - production
          - preview

jobs:
  deploy-backend:
    name: Deploy Backend
    if: ${{ inputs.deploy_backend == true }}
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./backend
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: ./backend/package-lock.json
      
      - name: Debug Backend Info
        run: |
          echo "Debugging backend deployment configuration"
          echo "Node.js version: $(node -v)"
          echo "NPM version: $(npm -v)"
          echo "Working directory: $(pwd)"
          echo "Vercel project ID length: ${#VERCEL_BACKEND_PROJECT_ID}"
          echo "Vercel org ID length: ${#VERCEL_ORG_ID}"
          echo "Vercel token exists: $([[ -n "$VERCEL_TOKEN" ]] && echo 'Yes' || echo 'No')"
        env:
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
          VERCEL_BACKEND_PROJECT_ID: ${{ secrets.VERCEL_BACKEND_PROJECT_ID }}
      
      - name: Install backend dependencies
        run: npm ci
      
      - name: Deploy backend to Vercel
        id: deploy-backend
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_BACKEND_PROJECT_ID }}
          working-directory: ./
          vercel-args: ${{ inputs.environment == 'production' && '--prod' || '' }}
        env:
          VERCEL_ENV: ${{ inputs.environment }}
      
      - name: Get Backend URL
        id: get-backend-url
        run: echo "::set-output name=backend_url::${{ steps.deploy-backend.outputs.preview-url }}"

  deploy-frontend:
    name: Deploy Frontend
    needs: deploy-backend
    if: ${{ inputs.deploy_frontend == true && (needs.deploy-backend.result == 'success' || needs.deploy-backend.result == 'skipped') }}
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./frontend
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '22'
          cache: 'npm'
          cache-dependency-path: ./frontend/package-lock.json
      
      - name: Debug Frontend Info
        run: |
          echo "Debugging frontend deployment configuration"
          echo "Node.js version: $(node -v)"
          echo "NPM version: $(npm -v)"
          echo "Working directory: $(pwd)"
          echo "Using backend URL: ${{ secrets.REACT_APP_API_BASE_URL }}"
      
      - name: Install frontend dependencies
        run: npm ci
      
      - name: Build frontend
        run: npm run build
        env:
          REACT_APP_API_BASE_URL: ${{ secrets.REACT_APP_API_BASE_URL }}
          REACT_APP_ENVIRONMENT: ${{ inputs.environment }}
          REACT_APP_APP_NAME: 'College Platform'
          REACT_APP_VERSION: '1.0.0'
      
      - name: Deploy frontend to Vercel
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          working-directory: ./
          vercel-args: ${{ inputs.environment == 'production' && '--prod' || '' }}
        env:
          VERCEL_ENV: ${{ inputs.environment }}